{
    "simple": {
        "prefix": "sim",
        "body": [
            "#include \"bits/stdc++.h\"",
            "using namespace std;",
            "  ",
            "#define int long long int ",
            "typedef vector<int> vi;",
            "typedef vector<vi> vvi;",
            "typedef vector<pair<int, int>> vpi;",
            "typedef vector<string> vs;",
            "typedef vector<bool> vb;",
            "",
            "const int mod = 1e9 + 7; ",
            "",
            "#define FAST ios_base::sync_with_stdio(false); cin.tie(NULL)  ",
            "#define EB emplace_back",
            "#define ALL(v) v.begin(), v.end() ",
            "#define size(v) (int)v.size() ",
            "#define endl '\\n'",
            "#define TC int t; cin >> t; while (t--) ",
            "",
            "struct custom_hash {",
            "    size_t operator()(uint64_t x) const {",
            "        static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();",
            "        x ^= FIXED_RANDOM;",
            "        return x ^ (x >> 16);",
            "    }",
            "};",
            "",
            "void Code() {",
            "    $0",
            "}",
            "  ",
            "int32_t main() {",
            " ",
            "    FAST;",
            "    ",
            "    Code();",
            "",
            "    return 0; ",
            "} "
        ],
        "description": "simple"
    },
    "testcases": {
        "prefix": "tc",
        "body": [
            "#include \"bits/stdc++.h\"",
            "using namespace std;",
            "  ",
            "#define int long long int ",
            "typedef vector<int> vi;",
            "typedef vector<vi> vvi;",
            "typedef vector<pair<int, int>> vpi;",
            "typedef vector<string> vs;",
            "typedef vector<bool> vb;",
            "",
            "const int mod = 1e9 + 7; ",
            "",
            "#define FAST ios_base::sync_with_stdio(false); cin.tie(NULL)  ",
            "#define EB emplace_back",
            "#define ALL(v) v.begin(), v.end() ",
            "#define size(v) (int)v.size() ",
            "#define endl '\\n'",
            "#define TC int t; cin >> t; while (t--) ",
            "",
            "struct custom_hash {",
            "    size_t operator()(uint64_t x) const {",
            "        static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();",
            "        x ^= FIXED_RANDOM;",
            "        return x ^ (x >> 16);",
            "    }",
            "};",
            "",
            "void Code() {",
            "    $0",
            "}",
            "  ",
            "int32_t main() {",
            " ",
            "    FAST;",
            "",
            "    TC { Code(); }",
            "",
            "    return 0; ",
            "} "
        ],
        "description": "testcases"
    },
    "unordered_map": {
        "prefix": "umo",
        "body": [
            "unordered_map"
        ],
        "description": "unordered_map"
    },
    "sieve": {
        "prefix": "sieve",
        "body": [
            "const int N = (int)1e7 + 1;",
            "vb is_prime(N, true);",
            "",
            "void sieve() {",
            "    is_prime[0] = is_prime[1] = false;",
            "    for (int i = 2; i * i <= N; i++) {",
            "        if (is_prime[i]) {",
            "            for (int j = i * i; j <= N; j += i)",
            "                is_prime[j] = false;",
            "        }",
            "    }",
            "}",
            ""
        ],
        "description": "sieve"
    }
}
